{"/API_Reference/README":{"title":"API and Resource reference","data":{"":"This section goes into more detail on the Hydra API and the resources it operates on.The DLCS API is at https://api.dlcs.io/ and requires credentials using basic auth over https. There is also an open API at http://dlcs.azurewebsites.net/ that requires no credentials and is backed by mock data. This is a good way to explore the resource model used by the DLCS and relate the descriptions int his documentation to API responses.The API uses JSON-LD and the Hydra vocabulary. Hydra+JSON-LD turns JSON over HTTP into a self-describing HyperMedia API. Each resource type has an associated JSON-LD context, and the full description of the types and their supported properties and operations is discoverable by clients.The root of the API is of the special type \"EntryPoint\":\n{\n\"@context\": \"http://dlcs.azurewebsites.net/contexts/DLCS.Client.Model.EntryPoint.jsonld\",\n\"@id\": \"http://dlcs.azurewebsites.net\",\n\"@type\": \"EntryPoint\",\n\"customers\": \"http://dlcs.azurewebsites.net/customers\"\n}\nEach type-specific context defines the vocabulary for that type, for example:\n{\n\"@context\": {\n\"hydra\": \"http://www.w3.org/ns/hydra/core#\",\n\"vocab\": \"http://dlcs.azurewebsites.net/vocab#\",\n\"EntryPoint\": \"vocab:EntryPoint\",\n\"customers\": {\n\"@id\": \"vocab:EntryPoint/customers\",\n\"@type\": \"@id\"\n}\n}\n}\nThe full description of the types and their supported properties and operations is available at the \"vocab\" URI:\nhttp://dlcs.azurewebsites.net/vocab\nA diagram showing the full model is available here; the rest of this section looks at each resource type in detail."}},"/API_Reference/batch":{"title":"Batch","data":{"":"{% include \"git+https://github.com/dlcs/dlcs-net.git/DLCS.Mock/Generated-Docs/Batch.md\" %}"}},"/API_Reference/customer":{"title":"Customer","data":{"":"","example#Example":"http://dlcs.azurewebsites.net/customers/4{% include \"git+https://github.com/dlcs/dlcs-net.git/DLCS.Mock/Generated-Docs/Customer.md\" %}"}},"/API_Reference/customerstorage":{"title":"CustomerStorage","data":{"":"{% include \"git+https://github.com/dlcs/dlcs-net.git/DLCS.Mock/Generated-Docs/CustomerStorage.md\" %}"}},"/API_Reference/handling_collections":{"title":"Handling Collections","data":{"":"Many of the DLCS resource properties are links that return a collection of resources. For example, the images in a space:\n/customer/34/spaces/12/images\nThis collection resource is defined thus:","images-#images (🔗)":"domain\trange\treadonly\twriteonly\tvocab:Space\thydra:Collection\tTrue\tFalse\n\nMethod\tLabel\tExpects\tReturns\tStatus\tGET\tRetrieves all Image\t\thydra:Collection\t200 OK\tPOST\tCreates a new Image\tvocab:Image\tvocab:Image\t201 Image created, 400 Bad Request\nThe resource returned from this URL is a Hydra collection:http://www.hydra-cg.com/spec/latest/core/#collectionsIn some cases, you as the API consumer will supply a collection - you POST a collection of images to your customer queue, e.g., at /customers/34/queue. Here, you would construct a Hydra Collections as the JSON payload of your POST.Clients of the DLCS API should expect to deal with paged collections in any scenario that returns a collection.Conversely, the DLCS will not accept a paged collection as input (e.g., as a job sent to the queue), because it might not be able to follow the links to subsequent pages. This is also an encouragement to keep batch sizes small (e.g., 100).","are-the-objects-that-are-returned-in-a-collection-fully-populated#Are the objects that are returned in a collection fully populated?":"It depends. We hope the answer to this is \"they are when you need them to be\" - i.e., when you expect to be able to work with the fields of a resource without having to make further HTTP requests, one per member of the collection. Sometimes the returned collection members will be lightweight, e.g.,\n\n\"member\":[\n{\n\"@id\":\"https://api.dlcs.io/customers/1\",\n\"@type\":\"Customer\"\n},\n{\n\"@id\":\"https://api.dlcs.io/customers/2\",\n\"@type\":\"Customer\"\n},\n{\n\"@id\":\"https://api.dlcs.io/customers/3\",\n\"@type\":\"Customer\"\n},\n{\n\"@id\":\"https://api.dlcs.io/customers/4\",\n\"@type\":\"Customer\"\n}\n]\n\nHere you are provided with just the link and the fact that the resource at the other end of the link is a Customer.","rdf-note#RDF note":"Although in the JSON-LD serialisation, the Hydra Collection's \"member\" property has an inherent ordering, in the underlying RDF model there is no such ordering. This is because \"member\" is not defined as a @list in JSON-LD terms [1]. This is an open issue with our use of the Hydra model.\n[1] https://www.w3.org/TR/json-ld/#sets-and-lists"}},"/API_Reference/imageoptimisationpolicy":{"title":"Imageoptimisationpolicy","data":{"":"","example#Example":"http://dlcs.azurewebsites.net/imageOptimisationPolicies/fast_lossy{% include \"git+https://github.com/dlcs/dlcs-net.git/DLCS.Mock/Generated-Docs/ImageOptimisationPolicy.md\" %}"}},"/API_Reference/authservice":{"title":"Authservice","data":{"":"{% include \"git+https://github.com/dlcs/dlcs-net.git/DLCS.Mock/Generated-Docs/AuthService.md\" %}"}},"/API_Reference/image":{"title":"Image","data":{"":"","example#Example":"http://dlcs.azurewebsites.net/customers/4/spaces/11/images/00445aee00000{% include \"git+https://github.com/dlcs/dlcs-net.git/DLCS.Mock/Generated-Docs/Image.md\" %}"}},"/API_Reference/imagestorage":{"title":"ImageStorage","data":{"":"{% include \"git+https://github.com/dlcs/dlcs-net.git/DLCS.Mock/Generated-Docs/ImageStorage.md\" %}"}},"/API_Reference/more_on_image_registration":{"title":"More on image registration","data":{"":"You can register images using the DLCS portal or via the DLCS API. The latter is more likely for systems integration, the former is useful for experiments or small numbers of images.The DLCS needs to \"see\" your image during the registration process, but it does not store your master image once registered. You can either provide the bytes of the image directly [1], or (more commonly) provide an origin endpoint from which the DLCS can fetch your image. The origin could be a http(s) URL, an Amazon S3 URL, or an FTP URL, with other protocols to follow. If the origin images are access-controlled, you can tell the DLCS how to authenticate against your origin so that it can see your source images (see originStrategy). Once registered, the DLCS does not require that you maintain the origin endpoint indefinitely as it does not need to access the origin endpoint at run time.Every registered image results in an autonomous service that does not depend on the existence of any other images or services. Images are independent of each other. However, the DLCS provides ways to manage very large numbers of images together - spaces and image metadata.The DLCS allows you to partition your registered images into spaces - each customer can have as many spaces as required. You can have different default settings and policies for different spaces. Within a space, images must have unique IDs. You can supply your own IDs, so that the DLCS record matches that used in your system, or you can let the DLCS assign an ID. If you supply an ID it must conform to http://tools.ietf.org/html/rfc3986#section-2 so that it can be used in the URL the DLCS provides for your image service. (clarify exactly what constraints and whether DLCS encodes for you etc).When registering each image, you send the DLCS one or more Image resources, as described under Image. you can supply the following information. ALL of the fields of Image are optional if the image bytes are included in the request; the \"origin\" field is required if not.","immediate-registration#Immediate registration":"You can PUT a single Image resource to a URL that maps to a space you have already configured:\ncurl --user name:password -X PUT -d '{\"origin\":\"http://flickr.com/xxx/yyy.jpg\"}' https://api.dlcs.io/customers/3/spaces/4/images/my-new-image-id\nor your can POST the new image to the space:\ncurl --user name:password -X POST -d '{\"origin\":\"http://flickr.com/xxx/yyy.jpg\", \"id\":\"my-new-image-id\"}' https://api.dlcs.io/customers/3/spaces/4/images\nOnce registered, the image information is available at\nhttps://dlcs.io/iiif-img/3/4/my-new-image-id/info.json\nIf you don't supply an identifier the image, the DLCS will assign one.Both of these are processed immediately, synchronously, and the HTTP response will not come back until the DLCS has finished with them. This is appropriate for building applications that require the IIIF Image API endpoint to be available as soon as possible. It can be seen in the DLCS portal if you upload a single image to your space. Here, you can select an image from local files and create an Image API endpoint immediately.","queued-registration-batches#Queued registration (batches)":"This is done by posting the image to the ingest queue endpoint:\n/customers/{you}/queue\nThis is the PREFERRED approach.This is the preferred model for systems integration scenarios, where you may have many millions of images to register, or you are incorporating the DLCS into your digitisation workflow. You can invoke queued registration from the portal dashboard (see \"other ways to register images). A more typical use would be at the API level, where you can register batches of images with the DLCS. For example, you could integrate the DLCS into a digitisation workflow. As books finish the workflow, batches of image registrations are created and submitted to the DLCS.As the queue is processed the DLCS fetches the source image from the supplied origin and registers it. A dashboard utility in the digitisation workflow queries the DLCS for the status of submitted batches and displays the current progress.The body of the POST to the queue is a hydra collection (see Handling Collections):\n{\n\"@context\": \"http://www.w3.org/ns/hydra/context.jsonld\",\n\"@type\": \"Collection\",\n\"member\": [\n{\n\"space\": 3,\n\"id\": \"76677bd1-705e-4599\",\n\"origin\": \"https://example.org/dam/images/76677bd1-705e-4599.tiff\",\n\"string1\": \"bib343434\",\n\"number1\": 0,\n\"tags\" : [\"cover\", \"interesting\"]\n},\n{\n\"space\": 3,\n\"id\": \"0bf94941-2c0f-49fd\",\n\"origin\": \"https://example.org/dam/images/0bf94941-2c0f-49fd.tiff\",\n\"string1\": \"bib343434\",\n\"number1\": 1\n},\n...\n]\n}\nThe two image in this example have the same string1; perhaps this is the catalogue identifier for the book of which they are pages. The number1 field is different for each. The first image has some tags, the second does not.[1] Not currently supported"}},"/API_Reference/originstrategy":{"title":"Originstrategy","data":{"":"","examples#Examples":"An \"out of the box\" origin strategy provided by the DLCS:http://dlcs.azurewebsites.net/originStrategies/basic_httpsA customer's configured CustomerOriginStrategy resources (these are created by a customer using the API or portal - the association of a customer's URI pattern with an out of the box origin strategy:http://dlcs.azurewebsites.net/customers/4/originStrategies{% include \"git+https://github.com/dlcs/dlcs-net.git/DLCS.Mock/Generated-Docs/OriginStrategy.md\" %}{% include \"git+https://github.com/dlcs/dlcs-net.git/DLCS.Mock/Generated-Docs/CustomerOriginStrategy.md\" %}"}},"/API_Reference/key":{"title":"Key","data":{"":"{% include \"git+https://github.com/dlcs/dlcs-net.git/DLCS.Mock/Generated-Docs/Key.md\" %}"}},"/API_Reference/portaluser":{"title":"Portaluser","data":{"":"","example#Example":"http://dlcs.azurewebsites.net/customers/1/portalUsers/8b083aee{% include \"git+https://github.com/dlcs/dlcs-net.git/DLCS.Mock/Generated-Docs/PortalUser.md\" %}"}},"/API_Reference/namedquery":{"title":"Namedquery","data":{"":"{% include \"git+https://github.com/dlcs/dlcs-net.git/DLCS.Mock/Generated-Docs/NamedQuery.md\" %}"}},"/API_Reference/portalrole":{"title":"Portalrole","data":{"":"","example#Example":"http://dlcs.azurewebsites.net/portalRoles{% include \"git+https://github.com/dlcs/dlcs-net.git/DLCS.Mock/Generated-Docs/PortalRole.md\" %}"}},"/API_Reference/queue":{"title":"Queue","data":{"":"","example#Example":"http://dlcs.azurewebsites.net/customers/4/queue{% include \"git+https://github.com/dlcs/dlcs-net.git/DLCS.Mock/Generated-Docs/Queue.md\" %}"}},"/API_Reference/role":{"title":"Role","data":{"":"","example#Example":"(to follow){% include \"git+https://github.com/dlcs/dlcs-net.git/DLCS.Mock/Generated-Docs/Role.md\" %}"}},"/API_Reference/querying_for_images":{"title":"Querying for images","data":{"":"Any hyperlink to a collection of images can accept query parameters that filter the returned images.\nqueue.images\nspace.images\nbatch.images\nbatch.completedImages\nbatch.errorImages\n\n(TODO - links to mock API examples of these)Once you have registered images with the DLCS you can query it for information on them. One immediate use of this is to monitor the progress of ongoing registrations. For example, if you registered a batch of 100,000 images it will take some time for the DLCS to process them, and you would like to be able to monitor progress and view any errors that were encountered. You can also query for usage statistics.You issue a DLCS query by submitting parameters that match the metadata fields, or a serialised JSON query object. This is a pattern for the DLCS to match metadata fields on. The model is very similar to the image registration data model, except you are submitting a filter and expecting all images that match that filter to be returned.\ncurl --user name:password -X GET -d https://api.dlcs.io/customers/3/spaces/4/images?string1=bib343434\nThis returns a Hydra collection.\n{\n\"@context\": \"http://www.w3.org/ns/hydra/context.jsonld\",\n\"@id\": \"https://api.dlcs.io/customers/3/spaces/4/images?string1=bib343434\",\n\"@type\": \"Collection\",\n\"totalItems\": \"2\",\n\"member\":\n[\n{\n\"url\":\"http://dlcs.io/2/3/76677bd1-705e-4599\",\n\"space\": 3,\n\"id\": \"76677bd1-705e-4599\",\n\"origin\": \"https://example.org/dam/images/76677bd1-705e-4599.tiff\",\n\"string1\": \"bib343434\",\n\"number1\": 0,\n\"tags\" : [\"cover\", \"interesting\"]\n},\n{\n\"url\":\"http://dlcs.io/2/3/0bf94941-2c0f-49fd\",\n\"space\": 3,\n\"id\": \"0bf94941-2c0f-49fd\",\n\"origin\": \"https://example.org/dam/images/0bf94941-2c0f-49fd.tiff\",\n\"string1\": \"bib343434\",\n\"nu,mber\": 1\n}\n]\n}"}},"/API_Reference/resource_model":{"title":"Resource model","data":{"":""}},"/API_Reference/roleprovider":{"title":"Roleprovider","data":{"":"{% include \"git+https://github.com/dlcs/dlcs-net.git/DLCS.Mock/Generated-Docs/RoleProvider.md\" %}"}},"/API_Reference/thumbnailpolicy":{"title":"Thumbnailpolicy","data":{"":"","example#Example":"http://dlcs.azurewebsites.net/thumbnailPolicies/standard{/* include \"git+https://github.com/dlcs/dlcs-net.git/DLCS.Mock/Generated-Docs/ThumbnailPolicy.md\" */}"}},"/API_Reference/space":{"title":"Space","data":{"":"","example#Example":"http://dlcs.azurewebsites.net/customers/4/spaces/11{% include \"git+https://github.com/dlcs/dlcs-net.git/DLCS.Mock/Generated-Docs/Space.md\" %}"}},"/API_Reference/storagepolicy":{"title":"StoragePolicy","data":{"":"{% include \"git+https://github.com/dlcs/dlcs-net.git/DLCS.Mock/Generated-Docs/StoragePolicy.md\" %}"}},"/More_on_named_queries":{"title":"More on Named Queries","data":{"":"An example of Named Queries is their user by the iiif.ly application to generate a manifest from a set of images.When it registers the end user’s images, iiif.ly assigns metadata to group images together, and to preserve the order.The iiif.ly customer (API user) has configured a Named Query to return a IIIF manifest.Template: https://dlcs.io/resource/{customer}/{query-name}/{space-name}/{string1}The Named Query – in response to requests that match this template,\nSelect all the images in {space-name} with a string1 value of {string1} and order them by {number1}\nProject the images into a manifest with one sequence where each canvas in the sequence corresponds to one image\n\nExample:https://dlcs.io/resource/4/iiifly/28EC11C6/a5425f9bhttp://universalviewer.io/?manifest=https://dlcs.io/resource/4/iiifly/28EC11C6/a5425f9b"}},"/dlcscommand_line_utility_md":{"title":"DLCS Command Line Utility","data":{"":"A command line utility for interacting with the DLCS, rather than issuing HTTP API requests directly. It can register single images from a local file system or from remote origin endpoints. Customers can use the utility to help build systems integration solutions quickly (it's just another command to pipe things to).Note - this also acts as a really good test harness for the HTTP API.Examples(not to be taken as definitive syntax, just for feel)Register an image from a local file system and allow the DLCS to assign an ID:dlcs --immediate -space 'my-space' my-local-image.tiffRegister an image from the internetdlcs --queued --space 'my-space' --id '09fed887abab65' http://flickr.com/xxx/yyyDefault settings (customer id, credentials etc) are configured in a config file (although can be overridden as args).More examples:Recursively register the contents of folder (dir flag) on FTP site:dlcs --space 3 dir -s --suppress-count ftp://myftp.net/images/folder(This works for FTP, local files where a directory listing can be obtained but not for http(s)). Without the --suppress-count flag it will warn with \"you are about to register 1345654 files, do you wish to continue? y/n\". Even so there is still a maximum set in config, say 5000 images at a time. dlcs utility can batch them.Super simple - default customer, space, credentials and all other options; utility packages local binary into POST:dlcs myimage.bmp"}},"/SUMMARY":{"title":"Summary","data":{"":"Introduction\nOverview\nAPI Reference\nResource model\nHandling Collections\nCustomer\nKey\nStoragePolicy\nCustomerStorage\nSpace\nImage\nImageStorage\nImageOptimisationPolicy\nThumbnailPolicy\nQueue\nBatch\nOriginStrategy\nMore on image registration\nQuerying for images\nRole\nAuthService\nRoleProvider\nNamedQuery\nPortalUser\nPortalRole\n\n\nDLCS Command Line Utility\nOther ways to register images\nUsing the portal\nQuestions\nMore on Named Queries\nWalkthroughs\nRegistering images via the API\nRegistering images in the portal\n\n\nThe DLCS Pilot\nPilot FAQs"}},"/":{"title":"Digital Library Cloud Services (DLCS)","data":{"":"A platform for interoperable image delivery, annotation, and search.","why-does-it-exist#Why does it exist?":"In the past, digitisation efforts were hampered by lack of standards. Content digitised at great expense stagnated in non interoperable silos behind ageing user interfaces. The International Image Interoperability Framework and the W3C Web Annotation Data Model are emerging open standards that address this problem. The DLCS is a managed implementation of these standards. It starts with the equivalent of \"elastic image server\" and builds from there.","who-can-use-it#Who can use it?":"Anyone from an individual to a large institution. The DLCS will enable smaller collections and libraries without significant infrastructure resources to undertake projects that would otherwise be impractical.","what-does-it-do#What does it do?":"DLCS provides tools and application programming interfaces (APIs) to manage services for image resources. When you register an image with the DLCS, you make it available as a IIIF Image API endpoint. This means it can be displayed in any compatible web-based client. You can register just a handful of images, or tens of millions. You can use DLCS APIs to construct IIIF Presentation API resources from your images for complex objects such as digitised books.If you have access control requirements the DLCS can enforce your policies to protect your images.The DLCS will offer read and write services for annotations on your images and other IIIF resources, using Open Annotation / W3C Annotation Data Model. You can integrate with existing annotation tools and services, or use the DLCS to build new applications for discovery, crowdsourcing, curation and other purposes.The DLCS will be able to perform optical character recognition (OCR) on your images. The OCR results are available in a variety of standard formats including METS-ALTO and transcription annotations.The DLCS provides high performance search within your IIIF resources and across your entire collection.","what-doesnt-it-do#What doesn't it do?":"The DLCS is not intended to be a preservation system, digital asset management system, collection management or cataloguing system. It does not provide any user interface for public discovery of your resources. It is designed for integration with all these types of system and more, through its APIs and services."}},"/other_ways_to_register_images":{"title":"Other ways to register images","data":{"":"In these scenarios the DLCS creates the ingest job for itself, in response to user action in the portal.(we need to gather scenarios and implement them)Drop to S3 Bucket then use the portal to configure fetchUse the portal to fetch directory from FTPDirect upload of single images and small batches in the portal - like iiif.ly"}},"/faqs":{"title":"Pilot FAQs","data":{"":"","what-is-the-dlcs#What is the DLCS?":"The Wellcome Library is developing cloud-based infrastructure to provide fast, scalable and highly available services for the delivery of its digital images, and, over time, the provision of full-text search and annotation services.  These services are known as the Digital Library Cloud Services (DLCS).","what-is-the-dlcs-pilot-service#What is the DLCS Pilot service?":"Although the primary use case for the DLCS is the Wellcome Library, we realised that with a relatively modest additional investment we could, potentially, offer these services to any cultural heritage organisation. In so doing, such organisations would be able to make their digital content available in rich and engaging ways, but do so without incurring the cost of developing and maintaining their own systems infrastructure1.To determine whether there is any interest in making use of such a shared service – and ascertain whether the services we are building are those which the community would find useful and affordable – the Wellcome Library is currently inviting institutions who wish to explore how they could make use of this service, to participate in a pilot service.","how-do-i-participate-in-the-dlcs-pilot#How do I participate in the DLCS Pilot?":"To participate in the pilot service you simply need to send an email to Robert Kiley (r.kiley@wellcome.ac.uk) with the following information:\nYour name\nEmail address\nInstitution\nEstimate of the total number of digital images you have in your collection\nName of technical contact\nEmail address of technical contact\n\nBy return, you will be sent further details of the DLCS, including credentials to access the DLCS portal and API services.","can-i-see-an-example-of-a-wellcome-library-digitised-object-being-delivered-via-the-dlcs#Can I see an example of a Wellcome Library digitised object being delivered via the DLCS?":"This example http://universalviewer.io/?manifest=http://wellcomelibrary.org/iiif/b2202296x/dmanifest is being served by the DLCS.  This can be seen by looking at the manifest (http://wellcomelibrary.org/iiif/b2202296x/dmanifest ) and observing that the image end-points are referencing the DLCS.","are-there-costs-involved-in-participating-in-the-dlcs-pilot#Are there costs involved in participating in the DLCS Pilot?":"No. The Wellcome Library will not charge you for making use of the DLCS during the pilot.Any costs incurred by the participating institution – such as spending time determining how to make use of the DLCS API – will, of course, need to be met by that institution,","how-long-will-the-dlcs-pilot-run-for#How long will the DLCS Pilot run for?":"This pilot will start on the 1st March 2016.  We do not have an end-date as yet, but anticipate in will run for between six and eight months.  All participants will be kept informed as to the progress of the pilot and in any event will be given at last 2 months’ notice.","what-do-i-need-to-be-able-to-make-use-of-the-dlcs-pilot#What do I need to be able to make use of the DLCS Pilot?":"In addition to the credentials needed to access the service (discussed above) you will need:\nA collection of digital images, which do not require any user authentication to view them.  Although the DLCS will be able to support full, delegated authentication (in line with the IIIF Presentation standard) for the pilot we are asking participants to only use “open” images.\nThe images to be made available via some web service – so the DLCS can ingest them into its system and return IIIF endpoints (URI’s)\nSome technical skills to interact with the DLCS API.","how-will-i-interact-with-the-dlcs-pilot#How will I interact with the DLCS pilot?":"The primary way participants will interact with the DLCS is via the DLCS API.  Further details of this are available at: https://dlcs.gitbooks.io/book/content/API_Reference/index.htmlUsers without the ability to make use of the DLCS API can still upload images, via a CSV interface.  This is detailed at: https://dlcs.gitbooks.io/book/content/registering_images_in_the_portal.html.","are-there-any-limits-on-how-i-use-the-dlcs-pilot#Are there any limits on how I use the DLCS Pilot?":"During the pilot, participants will be asked to load no more than 10,000 images (or 20 Gb of data) to the DLCS.  Participants will also be required to accept the terms of the End User Licence Agreement.As this is a pilot – with no Service Level Agreement and the like, participants should be wary of building any integration into live, production systems.\nIs the DLCS Pilot just providing IIIF image services?\nAt launch (March 2016), the DLCS will only provide IIIF image services.Over the course of the pilot we hope to extend these service to include search (if you have OCR content) and annotation services.  Updates will be provided via the Slack channel and the monthly community calls.","how-do-i-get-support-and-provide-feedback#How do I get support and provide feedback?":"All participants will be invited to join the DLCS Slack Channel https://dlcs.slack.com/messages/general/ and this will be the primary means through which support questions can be raised and answered.  Is it also the means by which we will solicit feedback.In addition a monthly “community call” will be held.  Details of this call – the date, time, dial-in number – will be advertised on the Slack channel.","what-services-is-the-dlcs-not-seeking-to-emulate#What services is the DLCS NOT seeking to emulate?":"For the avoidance of doubt we should make clear make clear from the start that the DLCS is not seeking to be:","a-preservation-system#A preservation system.":"Though the DLCS will hold copies of images it serves, these will be optimised for fast delivery over the web.  For example, a library may hold a large, uncompressed TIFF file and upload that to the DLCS.  On ingest though, the DLCS will transform this into a fully-optimised JPEG 2000 file and discard the original.","a-library-catalogue-system#A library catalogue system.":"Although the DLCS may include resource discovery metadata, derived from a library catalogue, the DLCS is not the system where you would catalogue items.","a-discovery-platform#A discovery platform":"The DLCS is not the means by which readers find content.  This activity still takes place on your own web site; you simply use the DLCS to provide access to the digitised images (and in time, search and annotation services).","where-can-i-find-more-information-about-iiif#Where can I find more information about IIIF?":"Information about the International Image Interoperability Framework (IIIF) can be found at: http://iiif.ioFor a simple guide to both the image and presentation API’s see: https://goo.gl/Ae7iQz"}},"/questions":{"title":"Questions","data":{"":"","does-my-origin-image-need-to-be-available-forever#Does my \"origin\" image need to be available forever?":"No. The DLCS needs to see it at registration time, but from then on provides the IIIF Image Service without further reference to it. However, we might want to see it again in the future if we want to change the way we provide the image service.Internally, the DLCS makes a JPEG 2000 derivative of your source image at registration time. This image is lossy (although of high quality), and optimised for tile delivery in IIIF compatible viewers. More efficient image formats may emerge in future, and we might want to take advantage of these and require the origin image again.","the-dlcs-does-not-preserve-my-original-image-but-id-like-it-to#The DLCS does not preserve my original image, but I'd like it to":"Preservation of origin (source) images is not a current feature of the DLCS - but if users want this, we could implement it - e.g., by saving a copy of the registered origin image to low cost archival storage. We think the DLCS would work alongside your own preservation system, but if you don't have one, the DLCS could act as a very simple storage solution."}},"/overview":{"title":"Overview","data":{"":"","image-registration#Image registration":"Image resources are at the heart of the DLCS. You tell it about an image, it offers services associated with that image. This registration of images can be a manual process, using the user interface of the portal. It can be semi-automated, involving uploading large numbers of images for registration. Or it can be wholly driven by the DLCS API, for integrating with your applications and workflows.You can register many kinds of image. JPEGs, JPEG2000 and TIFFs are typical source images. Other formats that can be converted to bitmaps (such as PDFs) are also supported. Once registered, a IIIF Image API endpoint is available for the image.When you register an image, you tell the DLCS where it is - the image's origin. The DLCS needs to see the image at registration time. Typically the origin might be an http(s) URL, probably with some access control to protect it. If the image is an archival or preservation master it might not have a URL on the web; the DLCS can also retrieve images via FTP(s), S3, and other protocols. You will need to supply some settings to tell the DLCS how to authenticate so it can retrieve your images from your origin URLs.If your images are not available at any URL the DLCS can see, you will need to upload them, so the DLCS can fetch them from temporary origin URLs it generates on your behalf. This is similar to uploading a large number of resources to an FTP site.The preferred pattern for systems integration and application development is to register images via the DLCS API. You send a small JSON payload to the DLCS. This is the image's metadata. This metadata includes the image's origin URL. It also tells the DLCS how to enforce access control on the services it generates for the image, and what level of service to offer to unauthorised users. In addition, you can store custom metadata strings, numbers and tags against each image. These fields let you build interesting bespoke applications on top of the DLCS platform. Fine control over image metadata allows you to aggregate images together to build more complex digital objects.You can register images one at a time, or in batches. The DLCS queues your batched images and will fetch them from the origin endpoints as the queue is processed.","two-sample-scenarios#Two sample scenarios":"","integration-with-digitisation-workflow#Integration with digitisation workflow":"This is how the Wellcome Library's digitisation workflow uses the DLCS API.The workflow deals with an individual book or archive item. This could consist of just one image, or potentially hundreds or even thousands of images. At the end of the digitisation workflow for an item, all the images for the item are stored in Library's preservation system, and the digitisation metadata (in this case METS) is saved to disk. At this point the workflow triggers a process that prepares batches of image registrations. The default batch size is 100, and the workflow code will call the DLCS to queue all the images of the book in as many batches as required. The process includes custom metadata for the DLCS to store against each image - in this case, the Library sends four custom fields:\ncatalogue reference (a unique identifier for the book)\nvolume number (if a multiple volume work: 0, 1, 2...)\npage label (e.g., a page number: \"37\" or \"xvi\")\norder (sequential index)\n\nThe Library's workflow system includes a dashboard that shows the progress of the images in the DLCS. The dashboard code can query the DLCS to retrieve information for this book in particular, because of the bespoke metadata stored against its images.The DLCS can also produce a IIIF presentation API manifest for this book, in response to a query that uses these fields.The API allows the digitisation workflow to monitor the progress of the images in the DLCS and provide instrumentation to Wellcome staff.","iiifly#iiif.ly":"(Log in at https://iiif.ly/. As this is a demo application you won't be able to create new images and image sets straight away - you'll need to have your account activated).You can upload images from your computer or drag them in from the web:\n\nAfter DLCS has processed them you can view them in a compatible viewer. The DLCS creates a manifest for the image set.\n\nThis is a demonstration web application that interacts with the DLCS API in real time to create IIIF resources from user input. It demonstrates two modes of registering images - queued and immediate. It stores a small amount of information about its users in a local database, but uses the DLCS API for everything else. It uses a feature of the DLCS API called spaces to partition the images by user. The iiif.ly application uses an API key to talk to the DLCS. This key corresponds to a single customer. Within its customer storage it can create unlimited numbers of spaces to organise the images it registers.A user can drag an image from the web or from the local machine into the iiif.ly upload user interface. When the user submits the form, the iiif.ly code will check to see if the current user already has a space in the DLCS and if not will create one. The iiif.ly application then registers the image with the DLCS in \"immediate\" mode. This is only permitted for API operations that register one image at a time. It is a synchronous image registration operation suitable for driving a user interface.If the user uploaded multiple images at once, they are queued as in the Library example. Once they have all finished processing the iiif.ly application will display the set of images as a single IIIF resource - a manifest. It does this by making use of a DLCS API feature called \"named queries\". A named query is like a stored procedure in a relational database. As well as encoding the information required to retrieve the images stored in the DLCS, the named query also encodes the information required to project the results of a DLCS query into a IIIF resource.","iiif-resources-and-the-linked-data-platform#IIIF resources and the Linked Data Platform":"The DLCS does not at present offer a CRUD API to IIIF resources directly. For example, adding a new IIIF Presentation API Canvas to a manifest by POSTing a new Canvas resource to a Sequence. Instead, the DLCS offers an API to manage image resources, and these DLCS resources result in IIIF resources on dlcs.io. No IIIF resources are served from api.dlcs.io, and no DLCS resources are served from dlcs.io. Your interaction with the API at api.dlcs.io adds image resources to the platform, which results in Image API endpoints on dlcs.io. If you define named queries via the API, you will also get Presentation API resources from dlcs.io.As a formal specification becomes available for IIIF CRUD, the DLCS will support it.","the-dlcs-api#The DLCS API":"The DLCS provides a Hypermedia API for managing its resources. This API is built using the Hydra vocabulary. While the Hydra specification is a work in progress, we have chosen to adopt it in preference to other Hypermedia vocabularies such as HAL or SIREN. We feel that having the DLCS API use the same JSON-LD standard as the IIIF resources it provides will help developers build applications on top of it.The API entry point is at https://api.dlcs.io. Clients of the API must present credentials using Basic authentication over https.A test version of the API is also available at http://dlcs.azurewebsites.net. This can be explored without credentials.","the-dlcs-command-line-utility#The DLCS command line utility":"As well as the API, we will provide a command line utility which can be integrated into batch scripts or used directly to interact with the DLCS."}},"/registering_images_in_the_portal":{"title":"Registering images in the portal","data":{"":"Currently the portal does not offer very many ways of registering images manually and organising their metadata into manifests.As the portal is further developed we will add features along the lines indicated in Other ways to register images, such as configuring the DLCS to fetch from FTP sites or Amazon S3 buckets. For now, there is a placeholder feature that shows you how you can provide images and metadata to the DLCS in a CSV file.For many users the portal does not need to provide much functionality - they will write code to integrate the DLCS with their systems. Third parties could create user friendly tools (like iiif.ly) on top of the DLCS API, in the same way that graphical user interfaces for Amazon S3 buckets have become common.These tools don't exist yet.\n\nThis demo CSV file uses a github repository to simulate your origin server. Each of the files listed shares a common metadata field (Reference1) and a varying metadata field (Number1):dixons5.csvWhen you upload, the DLCS will enqueue the images mentioned in the CSV and start to process them:\n\nOnce they are all present, you could use a Named Query to view them as a single manifest:https://dlcs.io/resource/4/iiifly/F5A41BCF/dixons1985catAnd in a viewer:http://universalviewer.io/?manifest=https://dlcs.io/resource/4/iiifly/F5A41BCF/dixons1985cat"}},"/resource_types":{"title":"Resource types","data":{"":""}},"/registering_images_via_the_api":{"title":"Registering images via the API","data":{"":"The following walkthrough shows how you can interact with the API at the command line via curl.In these examples the customer's API key and secret is placed in the file dlcs-creds and passed to curl via the --netrc-file argument.$ curl --netrc-file dlcs-creds https://api-hydra.dlcs.io/customers/4This returns information about the customer:\n{\n\"@context\": \"http://api-hydra.dlcs.io/contexts/Customer.jsonld\",\n\"@id\": \"http://api-hydra.dlcs.io/customers/4\",\n\"@type\": \"vocab:Customer\",\n\"portalUsers\": \"http://api-hydra.dlcs.io/customers/4/portalUsers\",\n\"namedQueries\": \"http://api-hydra.dlcs.io/customers/4/namedQueries\",\n\"originStrategies\": \"http://api-hydra.dlcs.io/customers/4/originStrategies\",\n\"authServices\": \"http://api-hydra.dlcs.io/customers/4/authServices\",\n\"roles\": \"http://api-hydra.dlcs.io/customers/4/roles\",\n\"queue\": \"http://api-hydra.dlcs.io/customers/4/queue\",\n\"spaces\": \"http://api-hydra.dlcs.io/customers/4/spaces\",\n\"allImages\": \"http://api-hydra.dlcs.io/customers/4/allImages\",\n\"name\": \"iiifly\",\n\"displayName\": \"iiif.ly\",\n\"keys\": [\n\"xxx\"\n],\n\"administrator\": false,\n\"created\": \"2016-01-29T10:20:00+00:00\"\n}\nBehaving as a RESTful API client, we can then follow links:$ curl --netrc-file dlcs-creds https://api-hydra.dlcs.io/customers/4/spaces\n{\n\"@context\": \"http://www.w3.org/ns/hydra/context.jsonld\",\n\"@id\": \"http://api-hydra.dlcs.io/customers/4/spaces\",\n\"@type\": \"Collection\",\n\"totalItems\": 9,\n\"member\": [\n{\n\"@context\": \"http://api-hydra.dlcs.io/contexts/Space.jsonld\",\n\"@id\": \"http://api-hydra.dlcs.io/customers/4/spaces/1\",\n\"@type\": \"vocab:Space\",\n\"defaultRoles\": \"http://api-hydra.dlcs.io/customers/4/spaces/1/defaultRoles\",\n\"images\": \"http://api-hydra.dlcs.io/customers/4/spaces/1/images\",\n\"metadata\": \"http://api-hydra.dlcs.io/customers/4/spaces/1/metadata\",\n\"name\": \"11BF0924\",\n\"created\": \"2016-02-09T16:41:37.332282+00:00\",\n\"imageBucket\": \"\",\n\"defaultTags\": [],\n\"keep\": false,\n\"transform\": false,\n\"maxUnauthorised\": 0\n},\n...\n{\n\"@context\": \"http://api-hydra.dlcs.io/contexts/Space.jsonld\",\n\"@id\": \"http://api-hydra.dlcs.io/customers/4/spaces/9\",\n\"@type\": \"vocab:Space\",\n\"defaultRoles\": \"http://api-hydra.dlcs.io/customers/4/spaces/9/defaultRoles\",\n\"images\": \"http://api-hydra.dlcs.io/customers/4/spaces/9/images\",\n\"metadata\": \"http://api-hydra.dlcs.io/customers/4/spaces/9/metadata\",\n\"name\": \"ecosystem-test\",\n\"created\": \"2016-02-23T11:33:46.164184+00:00\",\n\"imageBucket\": \"\",\n\"defaultTags\": [],\n\"keep\": false,\n\"transform\": false,\n\"maxUnauthorised\": 0\n}\n]\n}\n$ curl --netrc-file dlcs-creds https://api-hydra.dlcs.io/customers/4/spaces/3(omitted)$ curl --netrc-file dlcs-creds https://api-hydra.dlcs.io/customers/4/spaces/3/images\n{\n\"@context\": \"http://www.w3.org/ns/hydra/context.jsonld\",\n\"@id\": \"http://api-hydra.dlcs.io/customers/4/spaces/3/images\",\n\"@type\": \"Collection\",\n\"totalItems\": 22,\n\"member\": [\n{\n\"@context\": \"http://api-hydra.dlcs.io/contexts/Image.jsonld\",\n\"@id\": \"http://api-hydra.dlcs.io/customers/4/spaces/3/images/06716cab-fcb5-4468-a27b-0b4cfa22f58e\",\n\"@type\": \"vocab:Image\",\n\"infoJson\": \"https://dlcs.io/iiif-img/4/3/06716cab-fcb5-4468-a27b-0b4cfa22f58e\",\n\"degradedInfoJson\": \"\",\n\"thumbnailInfoJson\": \"http://thumbs.dlcs.io/thumbs/4/3/06716cab-fcb5-4468-a27b-0b4cfa22f58e\",\n\"created\": \"2016-02-10T16:37:43.065907+00:00\",\n\"origin\": \"http://orig13.deviantart.net/4e91/f/2015/253/e/7/art_trade___godzilla_and_baby_godzilla_by_kingasylus91-d9925jf.png\",\n\"tags\": [],\n\"roles\": [],\n\"preservedUri\": \"\",\n\"string1\": \"52503a2d\",\n\"string2\": \"\",\n\"string3\": \"\",\n\"maxUnauthorised\": -1,\n\"number1\": 0,\n\"number2\": 0,\n\"number3\": 0,\n\"width\": 2495,\n\"height\": 1662,\n\"error\": \"\",\n\"batch\": 4,\n\"finished\": \"2016-02-10T16:38:06.988255+00:00\",\n\"ingesting\": false\n},\n...\n{\n\"@context\": \"http://api-hydra.dlcs.io/contexts/Image.jsonld\",\n\"@id\": \"http://api-hydra.dlcs.io/customers/4/spaces/3/images/fae349eb-4e84-49e5-b724-3f6fbc8dd6bd\",\n\"@type\": \"vocab:Image\",\n\"infoJson\": \"https://dlcs.io/iiif-img/4/3/fae349eb-4e84-49e5-b724-3f6fbc8dd6bd\",\n\"degradedInfoJson\": \"\",\n\"thumbnailInfoJson\": \"http://thumbs.dlcs.io/thumbs/4/3/fae349eb-4e84-49e5-b724-3f6fbc8dd6bd\",\n\"created\": \"2016-02-12T12:43:27.993246+00:00\",\n\"origin\": \"http://www.desang.net/wp-content/uploads/2012/12/Mushrooms.jpg\",\n\"tags\": [\n\"mushroom\"\n],\n\"roles\": [],\n\"preservedUri\": \"\",\n\"string1\": \"mystring\",\n\"string2\": \"\",\n\"string3\": \"\",\n\"maxUnauthorised\": -1,\n\"number1\": 0,\n\"number2\": 0,\n\"number3\": 0,\n\"width\": 3008,\n\"height\": 2000,\n\"error\": \"\",\n\"batch\": 32,\n\"finished\": \"2016-02-12T12:43:47.344131+00:00\",\n\"ingesting\": false\n}\n]\n}\nWe can take a look at our queue:$ curl --netrc-file dlcs-creds https://api-hydra.dlcs.io/customers/4/queue\n{\n\"@context\": \"http://api-hydra.dlcs.io/contexts/Queue.jsonld\",\n\"@id\": \"http://api-hydra.dlcs.io/customers/4/queue\",\n\"@type\": \"vocab:Queue\",\n\"size\": 0,\n\"batches\": \"http://api-hydra.dlcs.io/customers/4/queue/batches\",\n\"images\": \"http://api-hydra.dlcs.io/customers/4/queue/images\"\n}\nAnd we can post new images to it for ingest, either directly in the body, or from a separate file:$ curl --netrc-file dlcs-creds -X POST --data @myimages.json https://api-hydra.dlcs.io/customers/4/queuemyimages.json looks like this:\n{\n\"@type\": \"Collection\",\n\"member\": [\n{\n\"space\" : \"3\",\n\"origin\": \"http://customer.com/images/Mushrooms.jpg\",\n\"tags\": [\"mushroom\"],\n\"string1\": \"mystring\"\n},\n{\n\"space\" : \"3\",\n\"origin\": \"http://customer.com/images/chicken-w-mushrooms-1.jpg\",\n\"tags\": [\"mushroom\", \"tasty\"],\n\"string1\": \"mystring\"\n}\n]\n}\nand the post to the queue returns a batch resource:\n{\n\"@context\": \"http://api-hydra.dlcs.io/contexts/Batch.jsonld\",\n\"@id\": \"http://api-hydra.dlcs.io/customers/4/queue/batches/59\",\n\"@type\": \"vocab:Batch\",\n\"errorImages\": \"http://api-hydra.dlcs.io/customers/4/queue/batches/59/errorImages\",\n\"images\": \"http://api-hydra.dlcs.io/customers/4/queue/batches/59/images\",\n\"completedImages\": \"http://api-hydra.dlcs.io/customers/4/queue/batches/59/completedImages\",\n\"submitted\": \"2016-02-23T20:53:45.999979+00:00\",\n\"count\": 2,\n\"completed\": 0,\n\"errors\": 0,\n\"finished\": \"0001-01-01T00:00:00\"\n}"}},"/using_the_portal":{"title":"Using the portal","data":{"":"In flux..."}},"/the_dlcs_pilot":{"title":"The DLCS Pilot","data":{"":"The Wellcome Library would like to invite any cultural heritage organisation- which has digitised content – to participate in the Digital Library Cloud Services (DLCS) pilot.Participants will be able to use the DLCS to generate IIIF endpoints for all images, make use of cloud based infrastructure to store and deliver those images and explore how the DLCS could be integrated into their own discovery platforms."}},"/walkthroughs":{"title":"Walkthroughs","data":{"":"This section looks at two different ways to register image sets."}}}